{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","ALPHABET","LENGTH","NONE","useState","sortType","setSortType","isReversed","setIsReversed","goods","isSetReversed","visibleGoods","sort","g1","g2","localeCompare","length","reverse","getReorderedGoods","isVisibleResetButton","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA6BE,IAAME,EAAgB,WAC3B,IACEC,EAGEH,EAHFG,SACAC,EAEEJ,EAFFI,OACAC,EACEL,EADFK,KAGF,EAAgCC,mBAASD,GAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EAjCD,SACLA,EACAJ,EACAK,GAEA,IAAMC,EAAY,YAAOF,GAezB,OAbAE,EAAaC,MAAK,SAACC,EAAIC,GACrB,OAAQT,GACN,KAAKP,EAASG,SACZ,OAAOY,EAAGE,cAAcD,GAE1B,KAAKhB,EAASI,OACZ,OAAOW,EAAGG,OAASF,EAAGE,OAExB,QACE,OAAO,MAIJN,EAAgCC,EAAaM,UAA5BN,EAaZO,CAAkBnB,EAAiBM,EAAUE,GAMrDY,EAAuBZ,GAAcF,IAAaF,EAExD,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CACE,WAAYjB,IAAaP,EAASG,WAGtCsB,QAAS,kBAAMjB,EAAYL,IAR7B,iCAaA,wBACEoB,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,WAAYjB,IAAaP,EAASI,SAGtCqB,QAAS,kBAAMjB,EAAYJ,IAR7B,4BAaA,wBACEmB,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,YAAaf,IAGjBgB,QAAS,kBAAMf,GAAeD,IARhC,qBAaCY,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAAS,kBArDmBN,GAqDM,EApD1CX,EAoDoCH,QAnDpCK,EAAcS,GAFK,IAAiBA,GAkD9B,sBAUJ,6BACGR,EAAMe,KAAI,SAAAC,GAAI,OACb,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCvHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2d961da1.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isSetReversed: boolean,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((g1, g2) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return g1.localeCompare(g2);\n\n      case SortType.LENGTH:\n        return g1.length - g2.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  return (!isSetReversed) ? visibleGoods : visibleGoods.reverse();\n}\n\nexport const App: React.FC = () => {\n  const {\n    ALPHABET,\n    LENGTH,\n    NONE,\n  } = SortType;\n\n  const [sortType, setSortType] = useState(NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const goods = getReorderedGoods(goodsFromServer, sortType, isReversed);\n  const setResetting = (type: SortType, reverse: boolean) => {\n    setSortType(type);\n    setIsReversed(reverse);\n  };\n\n  const isVisibleResetButton = isReversed || sortType !== NONE;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            {\n              'is-light': sortType !== SortType.ALPHABET,\n            },\n          )}\n          onClick={() => setSortType(ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            {\n              'is-light': sortType !== SortType.LENGTH,\n            },\n          )}\n          onClick={() => setSortType(LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            {\n              'is-light': !isReversed,\n            },\n          )}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {isVisibleResetButton && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => setResetting(NONE, false)}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}